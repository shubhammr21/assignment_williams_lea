# define an alias for the specific python version used in this file.
FROM docker.io/python:3.12.7-slim-bookworm AS python

# Python build stage
FROM python AS python-build-stage

ARG BUILD_ENVIRONMENT=local

# Install apt packages
RUN apt-get update && apt-get install --no-install-recommends -y \
  # dependencies for building Python packages
  build-essential \
  # psycopg dependencies
  libpq-dev \
  # cleaning up unused files
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

# Requirements are installed here to ensure they will be cached.
COPY ./requirements-dev.lock .


# Installing dependencies and creating wheels
RUN pip install --no-cache-dir --no-index --no-deps --upgrade pip \
  && pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements-dev.lock

# Python 'run' stage
FROM python AS python-run-stage

ARG BUILD_ENVIRONMENT=local
ARG APP_HOME=/app

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV BUILD_ENV=${BUILD_ENVIRONMENT}

WORKDIR ${APP_HOME}


# devcontainer dependencies and utils
RUN apt-get update && apt-get install --no-install-recommends -y \
  bash-completion \
  # Translations dependencies
  gettext \
  git \
  # psycopg dependencies
  libpq-dev  \
  nano \
  ssh \
  sudo \
  wait-for-it \
  && groupadd --gid 1000 dev-user \
  && useradd --uid 1000 --gid dev-user --shell /bin/bash --create-home dev-user \
  && echo dev-user ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/dev-user \
  && chmod 0440 /etc/sudoers.d/dev-user \
  # cleaning up unused files
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/*

# All absolute dir copies ignore workdir instruction. All relative dir copies are wrt to the workdir instruction
# copy python dependency wheels from python-build-stage
# Installing dependencies from previously created wheels
RUN --mount=type=bind,from=python-build-stage,source=/app/wheels,target=/wheels \
  pip install --no-cache --no-cache-dir --no-index --no-deps --find-links=/wheels/ /wheels/*

COPY ./docker/django/entrypoint /entrypoint
COPY ./docker/django/start-dev /start
RUN sed -i 's/\r$//g' /entrypoint \
  && sed -i 's/\r$//g' /start \
  && chmod +x /entrypoint \
  && chmod +x /start


# copy application code to WORKDIR
# COPY . ${APP_HOME}

ENTRYPOINT ["/entrypoint"]
